{"tagline":"For NodeJS","google":"UA-36807397-1","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Install [![Build Status](https://secure.travis-ci.org/dresende/node-orm2.png)](http://travis-ci.org/dresende/node-orm2)\r\n\r\n```sh\r\nnpm install orm@2.0.0-alpha3\r\n```\r\n\r\nDespite the alpha tag, this is the recommended version for new applications.\r\n\r\n## DBMS Support\r\n\r\n- MySQL\r\n- PostgreSQL\r\n- SQLite\r\n\r\n## Introduction\r\n\r\nThis is a node.js object relational mapping module.\r\n\r\nHere is an example on how to use it:\r\n\r\n```js\r\nvar orm = require('orm');\r\n\r\norm.connect(\"mysql://username:password@host/database\", function (err, db) {\r\n\tif (err) throw err;\r\n\r\n\tvar Person = db.define('person', {\r\n\t\tname      : String,\r\n\t\tsurname   : String,\r\n\t\tage       : Number,\r\n\t\tmale      : Boolean,\r\n\t\tcontinent : [ 'Europe', 'America', 'Asia', 'Africa', 'Australia', 'Antartica' ], // ENUM type\r\n\t\tphoto     : Buffer, // BLOB/BINARY\r\n\t\tdata      : Object // JSON encoded\r\n\t});\r\n\r\n\tPerson.find({ surname: \"Doe\" }, function (err, people) {\r\n\t\t// SQL: \"SELECT * FROM person WHERE surname = 'Doe'\"\r\n\r\n\t\tconsole.log(\"People found: %d\", people.length);\r\n\t\tconsole.log(\"First person: %s\", people[0].name);\r\n\t});\r\n});\r\n```\r\n\r\n## Models\r\n\r\nA Model is a structure binded to one or more tables, depending on the associations. The model name is assumed to be the table name. After defining a model you can use it to manipulate the table.\r\n\r\n## Associations\r\n\r\nAn association is a relation between one or more tables.\r\n\r\n## hasOne vs. hasMany Associations\r\n\r\nIf you have a relation of 1 to 0 or 1 to 1, you should use `hasOne` association. This assumes a column in the model that has the id of the other end of the relation.\r\n\r\n```js\r\nvar Person = db.define('person', {\r\n\tname : String\r\n});\r\nvar Animal = db.define('animal', {\r\n\tname : String\r\n});\r\nAnimal.hasOne(\"owner\", Person); // assumes column 'owner_id' in 'animal' table\r\n\r\n// get animal with id = 123\r\nAnimal.get(123, function (err, Foo) {\r\n\t// Foo is the animal model instance, if found\r\n\tFoo.getOwner(function (err, John) {\r\n\t\t// if Foo animal has really an owner, John points to it\r\n\t});\r\n});\r\n```\r\n\r\nFor relations of 1 to many you have to use `hasMany` associations. This assumes another table that has 2 columns, one for each table in the association.\r\n\r\n```js\r\nvar Person = db.define('person', {\r\n\tname : String\r\n});\r\nPerson.hasMany(\"friends\"); // omitting the other Model, it will assume self model\r\n\r\nPerson.get(123, function (err, John) {\r\n\tPerson.getFriends(function (err, friends) {\r\n\t\t// assumes table person_friends with columns person_id and friends_id\r\n\t});\r\n});\r\n```\r\n","name":"Object Relational Mapping"}