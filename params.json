{"body":"## Install [![Build Status](https://secure.travis-ci.org/dresende/node-orm2.png)](http://travis-ci.org/dresende/node-orm2)\r\n\r\n```sh\r\nnpm install orm@2.0.0-alpha4\r\n```\r\n\r\nDespite the alpha tag, this is the recommended version for new applications.\r\n\r\n## DBMS Support\r\n\r\n- MySQL\r\n- PostgreSQL\r\n- SQLite\r\n\r\n## Introduction\r\n\r\nThis is a node.js object relational mapping module.\r\n\r\nHere is an example on how to use it:\r\n\r\n```js\r\nvar orm = require('orm');\r\n\r\norm.connect(\"mysql://username:password@host/database\", function (err, db) {\r\n\tif (err) throw err;\r\n\r\n\tvar Person = db.define('person', {\r\n\t\tname      : String,\r\n\t\tsurname   : String,\r\n\t\tage       : Number,\r\n\t\tmale      : Boolean,\r\n\t\tcontinent : [ 'Europe', 'America', 'Asia', 'Africa', 'Australia', 'Antartica' ], // ENUM type\r\n\t\tphoto     : Buffer, // BLOB/BINARY\r\n\t\tdata      : Object // JSON encoded\r\n\t}, {\r\n\t\tmethods: {\r\n\t\t\tfullName: function () {\r\n\t\t\t\treturn this.name + ' ' + this.surname;\r\n\t\t\t}\r\n\t\t},\r\n\t\tvalidations: {\r\n\t\t\tage: orm.validators.rangeNumber(18, undefined, 'under-age')\r\n\t\t}\r\n\t});\r\n\r\n\tPerson.find({ surname: \"Doe\" }, function (err, people) {\r\n\t\t// SQL: \"SELECT * FROM person WHERE surname = 'Doe'\"\r\n\r\n\t\tconsole.log(\"People found: %d\", people.length);\r\n\t\tconsole.log(\"First person: %s, age %d\", people[0].fullName(), people[0].age);\r\n\r\n\t\tpeople[0].age = 16;\r\n\t\tpeople[0].save(function (err) {\r\n\t\t\t// err.msg = 'under-age';\r\n\t\t});\r\n\t});\r\n});\r\n```\r\n\r\n## Models\r\n\r\nA Model is a structure binded to one or more tables, depending on the associations. The model name is assumed to be the table name. After defining a model you can use it to manipulate the table.\r\n\r\n## Finding Items\r\n\r\nAfter defining a Model you can get a specific element or find one or more based on some conditions.\r\n\r\n```js\r\nPerson.find({ name: \"John\", surname: \"Doe\" }, 3, function (err, people) {\r\n\t// finds people with name='John' AND surname='Doe' and returns the first 3\r\n});\r\n```\r\n\r\nOr if you know the ID of the item (called Instance):\r\n\r\n```js\r\nPerson.get(123, function (err, person) {\r\n\t// finds person with id = 123\r\n});\r\n```\r\n\r\nIf you need to sort the results because you're limiting or just because you want them sorted do:\r\n\r\n```js\r\nPerson.find({ surname: \"Doe\" }, \"name\", function (err, people) {\r\n\t// finds people with surname='Doe' and returns sorted by name ascending\r\n});\r\nPerson.find({ surname: \"Doe\" }, [ \"name\", \"Z\" ], function (err, people) {\r\n\t// finds people with surname='Doe' and returns sorted by name descending\r\n\t// ('Z' means DESC; 'A' means ASC - default)\r\n});\r\n```\r\n\r\nThere are more options that you can pass to find something. These options are passed in a second\r\nobject:\r\n\r\n```js\r\nPerson.find({ surname: \"Doe\" }, { offset: 2 }, function (err, people) {\r\n\t// finds people with surname='Doe', skips the first 2 and returns the others\r\n});\r\n```\r\n\r\nThe order of the parameters is not fixed. You can pass the callback first if you like or mix the\r\nother paramenters. The only parameter that needs to be in order is when you pass 2 objects. The\r\nfirst one is for conditions (although it can be empty) and the second one is for options.\r\n\r\n## Associations\r\n\r\nAn association is a relation between one or more tables.\r\n\r\n## hasOne vs. hasMany Associations\r\n\r\nIf you have a relation of 1 to 0 or 1 to 1, you should use `hasOne` association. This assumes a column in the model that has the id of the other end of the relation.\r\n\r\n```js\r\nvar Person = db.define('person', {\r\n\tname : String\r\n});\r\nvar Animal = db.define('animal', {\r\n\tname : String\r\n});\r\nAnimal.hasOne(\"owner\", Person); // assumes column 'owner_id' in 'animal' table\r\n\r\n// get animal with id = 123\r\nAnimal.get(123, function (err, Foo) {\r\n\t// Foo is the animal model instance, if found\r\n\tFoo.getOwner(function (err, John) {\r\n\t\t// if Foo animal has really an owner, John points to it\r\n\t});\r\n});\r\n```\r\n\r\nFor relations of 1 to many you have to use `hasMany` associations. This assumes another table that has 2 columns, one for each table in the association.\r\n\r\n```js\r\nvar Person = db.define('person', {\r\n\tname : String\r\n});\r\nPerson.hasMany(\"friends\"); // omitting the other Model, it will assume self model\r\n\r\nPerson.get(123, function (err, John) {\r\n\tPerson.getFriends(function (err, friends) {\r\n\t\t// assumes table person_friends with columns person_id and friends_id\r\n\t});\r\n});\r\n```","tagline":"For NodeJS","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-36807397-1","name":"Object Relational Mapping"}